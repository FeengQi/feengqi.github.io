<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feeng Blog</title>
  
  <subtitle>A little bit of accumulation, a little progress</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="feengqi.com/"/>
  <updated>2018-03-18T09:05:16.000Z</updated>
  <id>feengqi.com/</id>
  
  <author>
    <name>冯淇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Warning setState(...) Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.的解决方案</title>
    <link href="feengqi.com/%E5%85%B3%E4%BA%8EWarning-setState-Can-only-update-a-mounted-or-mounting-component-This-usually-means-you-called-setState-on-an-unmounted-component-This-is-a-no-op-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>feengqi.com/关于Warning-setState-Can-only-update-a-mounted-or-mounting-component-This-usually-means-you-called-setState-on-an-unmounted-component-This-is-a-no-op-的解决方案.html</id>
    <published>2018-03-17T05:02:52.000Z</published>
    <updated>2018-03-18T09:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近写react项目，切换路由时，出现这个样的警告<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: </span><br><span class="line">setState(...): Can only update a mounted or mounting component. </span><br><span class="line">This usually means you called setState() on an unmounted component. </span><br><span class="line">This is a no-op.</span><br><span class="line">Please check the code <span class="keyword">for</span> the xxx component.</span><br></pre></td></tr></table></figure></p><p>查找了一下，发现已经有很多大神发现并解决了这个问题，于是整合了一些大神的文章，整理出了以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: </span><br><span class="line">setState(...): Can only update a mounted or mounting component. </span><br><span class="line">This usually means you called setState() on an unmounted component. </span><br><span class="line">This is a no-op.</span><br><span class="line">Please check the code <span class="keyword">for</span> the xxx component.</span><br></pre></td></tr></table></figure><p>实际的原因是因为在组件挂载（mounted）之后进行了异步操作，比如ajax请求或者设置了定时器等，而你在callback中进行了setState操作。当你切换路由时，组件已经被卸载（unmounted）了，此时异步操作中callback还在执行，因此setState没有得到值。在React的官网里有一个解决这个办法的方案，<a href="https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html" target="_blank" rel="noopener">isMounted</a><br>原因：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Such situations most commonly occur due to callbacks, </span><br><span class="line">when a component is waiting <span class="keyword">for</span> some data and gets unmounted before the data arrives. </span><br><span class="line">Ideally, any callbacks should be canceled <span class="keyword">in</span> componentWillUnmount, prior to unmounting.</span><br></pre></td></tr></table></figure></p><p>大概意思是这种情况会出现在callback中，我们的异步请求返回数据之前，组件可能就已经被卸载了，等数据回来再使用setState就会报出上面的警告，所以我们应该手动在componentWillUnmount里去取消callback在它被unmounting之前。<br>解决办法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Just set a _isMounted property to <span class="literal">true</span> <span class="keyword">in</span> componentDidMount </span><br><span class="line">and set it to <span class="literal">false</span> <span class="keyword">in</span> componentWillUnmount, and use <span class="keyword">this</span> variable to check your component<span class="string">'s status.</span></span><br></pre></td></tr></table></figure></p><p>很好理解，我们使用一个标志位_isMounted，在componentDidMount里设置为true,在componentWillUnmount里设置为false，仅当_isMounted为true即还未被卸载，才执行setState()。</p><p>解决方法：</p><p>一、在卸载的时候对所有的操作进行清除（例如：abort你的ajax请求或者清除定时器）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.ajax请求</span></span><br><span class="line">    $.ajax(<span class="string">'你的请求'</span>,&#123;&#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                aa:<span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="comment">//2.定时器</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">componentWillUnMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.ajax请求</span></span><br><span class="line">    $.ajax.abort()</span><br><span class="line">    <span class="comment">//2.定时器</span></span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、设置一个flag，当unmount的时候重置这个flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._isMounted = <span class="literal">true</span>;</span><br><span class="line">    $.ajax(<span class="string">'你的请求'</span>,&#123;&#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>._isMounted)&#123;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                    aa:<span class="literal">true</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">componentWillUnMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._isMounted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、最简单的方式（万金油）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    $.ajax(<span class="string">'你的请求'</span>,&#123;&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            data: datas,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line">componentWillUnmount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState = <span class="function">(<span class="params">state,callback</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文地址：</p><ul><li>作者：大柚子08<br>链接：<a href="https://www.jianshu.com/p/a9d1f5aa719a" target="_blank" rel="noopener">https://www.jianshu.com/p/a9d1f5aa719a</a><br>來源：简书</li><li>作者：一江西流<br>链接：<a href="https://www.cnblogs.com/zyl-Tara/p/7998590.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyl-Tara/p/7998590.html</a><br>來源：博客园</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近写react项目，切换路由时，出现这个样的警告&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
      <category term="react" scheme="feengqi.com/categories/react/"/>
    
    
      <category term="react" scheme="feengqi.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Linux下XXX is not in the sudoers file.This incident will be reported解决方法</title>
    <link href="feengqi.com/Linux%E4%B8%8BXXX-is-not-in-the-sudoers-file-This-incident-will-be-reported%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <id>feengqi.com/Linux下XXX-is-not-in-the-sudoers-file-This-incident-will-be-reported解决方法.html</id>
    <published>2018-02-17T02:59:16.000Z</published>
    <updated>2018-03-18T04:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最见买了个服务器，弄出问题就记了下来：</p></blockquote><ul><li>当我们使用sudo命令切换用户的时候可能会遇到提示以下错误：xxx is not in the sudoers file. This incident will be reported，xxx是你当前的用户名，究其原因是用户没有加入到sudo的配置文件里</li></ul><ol><li>切换到root用户，运行visudo命令</li><li><p>在打开的配置文件中，找到root ALL=(ALL) ALL，在下面添加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx ALL=(ALL) ALL //其中xxx是你要加入的用户名称</span><br></pre></td></tr></table></figure></li><li><p>输入:wq保存并退出配置文件，再次使用sudo命令就不会有上面的提示了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最见买了个服务器，弄出问题就记了下来：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当我们使用sudo命令切换用户的时候可能会遇到提示以下错误：xxx is not in the sudoers file. This incident w
      
    
    </summary>
    
      <category term="linux" scheme="feengqi.com/categories/linux/"/>
    
    
      <category term="linux" scheme="feengqi.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查询语句</title>
    <link href="feengqi.com/MySQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.html"/>
    <id>feengqi.com/MySQL查询语句.html</id>
    <published>2018-01-13T02:38:15.000Z</published>
    <updated>2018-03-18T04:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>全查</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name</span><br></pre></td></tr></table></figure><blockquote><p>*表示查询全部字段</p></blockquote><blockquote><p>from表示查询哪一张表</p></blockquote><ol><li>查询某个字段的值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select xx from table_name</span><br></pre></td></tr></table></figure><blockquote><p>xx表示要查询的字段</p></blockquote><p>3.查询多个字段的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select xx,yy from table_name</span><br></pre></td></tr></table></figure><blockquote><p>注意：要查询的字段与字段之间要用英文逗号（,）间隔</p></blockquote><p>4.条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where xx&lt;30</span><br></pre></td></tr></table></figure><blockquote><p>where表示条件（条件关键字），在where之后跟过滤的条件</p></blockquote><blockquote><p>注意：逻辑运算符：=,&lt;,&gt;,&gt;=,&lt;=,!=相当于&lt;&gt;</p></blockquote><blockquote><p>注意：条件语句中的值需要加单引号’’，用单引号包裹</p></blockquote><p>5.多条件查询，与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where 字段&gt;=&apos;10&apos; and 字段&lt;=&apos;30&apos;</span><br></pre></td></tr></table></figure><p>and 关键字表示 和（并且），需要两边条件同时满足<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where 字段 between &apos;18&apos; and &apos;30&apos;</span><br></pre></td></tr></table></figure></p><p>6.多条件查询，或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name  where 字段A=&apos;nam&apos; or 字段B=&apos;18&apos;</span><br></pre></td></tr></table></figure><p>or 表示 或 ，两边条件只要满足一个就可以</p><p>7.区间查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where 字段 between &apos;18&apos; and &apos;30&apos;</span><br></pre></td></tr></table></figure><p>between..and.. 关键字表示什么区间内，范围在and前后表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tbale_name where 字段&gt;=&apos;18&apos; and 字段&lt;=&apos;30&apos;</span><br></pre></td></tr></table></figure><p>8.以集合方式查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where 字段 in(10,25)</span><br></pre></td></tr></table></figure><p>in关键字表示集合，在in后面跟括号，在括号中写入集合，<br>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where 字段=&apos;10&apos; or 字段=&apos;25&apos;</span><br></pre></td></tr></table></figure><p>9.排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name order by 字段</span><br></pre></td></tr></table></figure><p>order by关键字表示排序，默认为正序，从小到大</p><p>从大到小 desc  从小到大 asc</p><p>10.模糊查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where 字段  like &apos;%字段中包含的某个字%&apos;</span><br></pre></td></tr></table></figure><p>like关键字表示模糊，后面跟‘%模糊的内容%’，前面为要根据那一个字段进行模糊查询<br>注意：’%a%’,’a%’’%a’,三个是不同的，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;全查&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas
      
    
    </summary>
    
      <category term="MySQL" scheme="feengqi.com/categories/MySQL/"/>
    
    
      <category term="MySQL查询语句" scheme="feengqi.com/tags/MySQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="feengqi.com/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>feengqi.com/npm常用命令.html</id>
    <published>2017-12-17T05:22:17.000Z</published>
    <updated>2018-03-19T20:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><ul><li>查看npm版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt; -g</span><br></pre></td></tr></table></figure><ul><li>全局安装，安装在node_modules(没有这个文件夹会创建)</li><li>全局包位置：C:\Users\Administrator\AppData\Roaming\npm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>会把express包安装到node_modules目录中</li><li>不会修改package.json</li><li>运行npm install命令时，不会自动安装<packagename></packagename></li><li>不加版本号，默认会安装最新的版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt; --save-dev</span><br></pre></td></tr></table></figure><ul><li>会把<packagename>包安装到node_modules目录中</packagename></li><li>会在package.json的devDependencies属性下添加<packagename></packagename></li><li>运行npm install命令时，会自动安装<packagename>到node_modules目录中</packagename></li><li>运行npm install –production或者注明NODE_ENV变量值为production时，不会自动安装<packagename>到node_modules目录中</packagename></li><li>(局部安装–开发依赖)</li><li>也可写成 npm install <packagename> -D</packagename></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt; --save</span><br></pre></td></tr></table></figure><ul><li>会把<packagename>包安装到node_modules目录中</packagename></li><li>会在package.json的dependencies属性下添加<packagename></packagename></li><li>运行npm install命令时，会自动安装<packagename>到node_modules目录中</packagename></li><li>运行npm install –production或者注明NODE_ENV变量值为production时，会自动安装packageName到node_modules目录中</li><li>(局部安装—运行依赖)</li><li>也可写成 npm install <packagename> -S</packagename></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt; –-save-optional</span><br></pre></td></tr></table></figure><ul><li>安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中</li><li>也可写成 npm install express -O</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list -g</span><br></pre></td></tr></table></figure><ul><li>查看所有全局安装的模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>查看某个模块的版本号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm unistall &lt;packageName&gt; --save-dev/-D</span><br><span class="line">npm unistall &lt;packageName&gt; --save/-S</span><br><span class="line">npm unistall &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>卸载 Node.js 模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>更新 Node.js 模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>搜索模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><ul><li>生成 package.json 文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt;@&lt;tag&gt;</span><br></pre></td></tr></table></figure><ul><li>指定tag的版本</li><li>不加版本号，默认会安装最新的版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;packageName&gt;@”&gt;=0.2.0 &lt;0.2.9″</span><br></pre></td></tr></table></figure><ul><li>安装模块指定版本号范围内的某一个版本</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><ul><li>列出当前安装的了所有包</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root</span><br></pre></td></tr></table></figure><ul><li>查看当前包的安装路径</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure><ul><li>查看全局包安装路径</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info &lt;packageName&gt;</span><br></pre></td></tr></table></figure><ul><li>显示包的信息</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls -l</span><br></pre></td></tr></table></figure><ul><li>运行npm config ls -l查看npm内部的一组配置参数，如果没有指定任何其他配置参数，则是默认值。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm help</span><br></pre></td></tr></table></figure><ul><li>帮助，如果要单独查看install命令的帮助，可以使用的npm help install</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像</a></p></li><li><p><a href="https://docs.npmjs.com/misc/config" target="_blank" rel="noopener">npm 官方文档</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="npm" scheme="feengqi.com/categories/npm/"/>
    
    
      <category term="npm" scheme="feengqi.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>修改npm全局安装模式的路径</title>
    <link href="feengqi.com/%E4%BF%AE%E6%94%B9npm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%B7%AF%E5%BE%84.html"/>
    <id>feengqi.com/修改npm全局安装模式的路径.html</id>
    <published>2017-11-10T05:19:36.000Z</published>
    <updated>2018-03-18T04:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1、打开cmd，执行npm config ls</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;npm config ls</span><br><span class="line">; cli configs</span><br><span class="line">user-agent = "npm/3.10.8 node/v6.10.3 win32 x64"</span><br><span class="line"></span><br><span class="line">; userconfig C:\Users\Administrator\.npmrc</span><br><span class="line">init-author-email = "xxxx@xxx.com"</span><br><span class="line">init-author-name = "'xxx'"</span><br><span class="line">registry = "https://registry.npm.taobao.org/"</span><br><span class="line"></span><br><span class="line">; globalconfig C:\Users\Administrator\AppData\Roaming\npm\etc\npmrc</span><br><span class="line">disturl = "https://npm.taobao.org/dist"</span><br><span class="line">registry = "https://registry.npm.taobao.org/"</span><br><span class="line"></span><br><span class="line">; builtin config undefined</span><br><span class="line">prefix = "C:\\Users\\Administrator\\AppData\\Roaming\\npm"</span><br><span class="line"></span><br><span class="line">; node bin location = C:\Program Files\nodejs\node.exe</span><br><span class="line">; cwd = C:\Users\Administrator</span><br><span class="line">; HOME = C:\Users\Administrator</span><br><span class="line">; "npm config ls -l" to show all defaults.</span><br></pre></td></tr></table></figure><ul><li>2、修改prefix的值：npm config set prefix *</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set perfix "C:\Users\Administrator\AppData\Roaming\npm\etc\npmrc"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1、打开cmd，执行npm config ls&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
      <category term="npm" scheme="feengqi.com/categories/npm/"/>
    
    
      <category term="npm" scheme="feengqi.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>git的rebase和merge</title>
    <link href="feengqi.com/git%E7%9A%84rebase%E5%92%8Cmerge.html"/>
    <id>feengqi.com/git的rebase和merge.html</id>
    <published>2017-10-01T07:20:00.000Z</published>
    <updated>2018-03-18T09:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/images/git.jpg">如图</a></p><blockquote><p>当我们使用Git log来参看commit时，其commit的顺序也有所不同。</p></blockquote><p>假设C3提交于9:00AM,C5提交于10:00AM,C4提交于11:00AM，C6提交于12:00AM,<br>对于使用git merge来合并所看到的commit的顺序（从新到旧）是：C7 ,C6,C4,C5,C3,C2,C1<br>对于使用git rebase来合并所看到的commit的顺序（从新到旧）是：C7 ,C6‘,C5’,C4,C3,C2,C1<br> 因为C6’提交只是C6提交的克隆，C5’提交只是C5提交的克隆，<br>从用户的角度看使用git rebase来合并后所看到的commit的顺序（从新到旧）是：C7 ,C6,C5,C4,C3,C2,C1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/images/git.jpg&quot;&gt;如图&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们使用Git log来参看commit时，其commit的顺序也有所不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设C3提交于9:00AM,C5提交于10:0
      
    
    </summary>
    
      <category term="git" scheme="feengqi.com/categories/git/"/>
    
    
      <category term="git rebase merge" scheme="feengqi.com/tags/git-rebase-merge/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程思想</title>
    <link href="feengqi.com/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3.html"/>
    <id>feengqi.com/面向对象编程思想.html</id>
    <published>2017-09-10T07:41:47.000Z</published>
    <updated>2018-03-18T04:22:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h2><p>面向对象是一种新兴的程序设计方法，或者说它是一种新的程序设计范型，其基本思想是使用对象，类，继承，封装，消息等基本概念来进行程序设计。</p><p>它是从现实世界中客观存在的事物（即对象）出发来构造软件系统，并在系统构造中尽可能运用人类的自然思维方式，强调直接以问题域（现实世界）中的事物为中心来思考问题，认识问题，并根据这些事物的本质特点，把它们抽象地表示为系统中的对象，作为系统的基本构成单位（而不是用一些与现实世界中的事物相关比较远，并且没有对应关系的其它概念来构造系统）。这可以使系统直接地映射问题域，保持问题域中事物及其相互关系的本来面貌。</p><p>它可以有不同层次的理解：</p><p>从世界观的角度可以认为：面向对象的基本哲学是认为世界是由各种各样具有自己的运动规律和内部状态的对象所组成的；不同对象之间的相互作用和通讯构成了完整的现实世界。因此，人们应当按照现实世界这个本来面貌来理解世界，直接通过对象及其相互关系来反映世界。这样建立起来的系统才能符合现实世界的本来面目。</p><p>从方法学的角度可以认为：面向对象的方法是面向对象的世界观在开发方法中的直接运用。它强调系统的结构应该直接与现实世界的结构相对应，应该围绕现实世界中的对象来构造系统，而不是围绕功能来构造系统。</p><p>从程序设计的角度来看，面向对象的程序设计语言必须有描述对象及其相互之间关系的语言成分。这些程序设计语言可以归纳为以下几类：系统中一切皆为对象；对象是属性及其操作的封装体；对象可按其性质划分为类，对象成为类的实例；实例关系和继承关系是对象之间的静态关系；消息传递是对象之间动态联系的唯一形式，也是计算的唯一形式；方法是消息的序列。</p><p>面向对象</p><p>面向对象(Object Oriented,OO)是当前计算机界关心的重点，它是90年代软件开发方法的主流。面向对象的概念和应用已超越了程序设计和软件开发，扩展到很宽的范围。如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。</p><p>谈到面向对象，这方面的文章非常多。但是，明确地给出对象的定义或说明对象的定义的非常少——至少我现在还没有发现。其初，“面向对象”是专指在程序设计中采用封装、继承、抽象等设计方法。可是，这个定义显然不能再适合现在情况。面向对象的思想已经涉及到软件开发的各个方面。如，面向对象的分析（OOA，Object Oriented Analysis），面向对象的设计（OOD，Object Oriented Design）、以及我们经常说的面向对象的编程实现（OOP，Object Oriented Programming）。许多有关面向对象的文章都只是讲述在面向对象的开发中所需要注意的问题或所采用的比较好的设计方法。看这些文章只有真正懂得什么是对象，什么是面向对象，才能最大程度地对自己有所裨益。这一点，恐怕对初学者甚至是从事相关工作多年的人员也会对它们的概念模糊不清。</p><p>面向对象是当前计算机界关心的重点，它是90年代软件开发方法的主流。面向对象的概念和应用已超越了程序设计和软件开发，扩展到很宽的范围。如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。</p><p>一、传统开发方法存在问题</p><p>1.软件重用性差<br>重用性是指同一事物不经修改或稍加修改就可多次重复使用的性质。软件重用性是软件工程追求的目标之一。</p><p>2.软件可维护性差<br>软件工程强调软件的可维护性，强调文档资料的重要性，规定最终的软件产品应该由完整、一致的配置成分组成。在软件开发过程中，始终强调软件的可读性、可修改性和可测试性是软件的重要的质量指标。实践证明，用传统方法开发出来的软件，维护时其费用和成本仍然很高，其原因是可修改性差，维护困难，导致可维护性差。</p><p>3.开发出的软件不能满足用户需要<br>用传统的结构化方法开发大型软件系统涉及各种不同领域的知识，在开发需求模糊或需求动态变化的系统时，所开发出的软件系统往往不能真正满足用户的需要。</p><p>用结构化方法开发的软件，其稳定性、可修改性和可重用性都比较差，这是因为结构化方法的本质是功能分解，从代表目标系统整体功能的单个处理着手，自顶向下不断把复杂的处理分解为子处理，这样一层一层的分解下去，直到仅剩下若干个容易实现的子处理功能为止，然后用相应的工具来描述各个最低层的处理。因此，结构化方法是围绕实现处理功能的“过程”来构造系统的。然而，用户需求的变化大部分是针对功能的，因此，这种变化对于基于过程的设计来说是灾难性的。用这种方法设计出来的系统结构常常是不稳定的 ，用户需求的变化往往造成系统结构的较大变化，从而需要花费很大代价才能实现这种变化。</p><p>二、面向对象的基本概念</p><p>(1)对象。<br>      对象是人们要进行研究的任何事物，从最简单的整数到复杂的飞机等均可看作对象，它不仅能表示具体的事物，还能表示抽象的规则、计划或事件。</p><p>(2)对象的状态和行为。<br>      对象具有状态，一个对象用数据值来描述它的状态。<br>      对象还有操作，用于改变对象的状态，对象及其操作就是对象的行为。<br>      对象实现了数据和操作的结合，使数据和操作封装于对象的统一体中</p><p>(3)类。<br>      具有相同或相似性质的对象的抽象就是类。因此，对象的抽象是类，类的具体化就是对象，也可以说类的实例是对象。<br>      类具有属性，它是对象的状态的抽象，用数据结构来描述类的属性。<br>      类具有操作，它是对象的行为的抽象，用操作名和实现该操作的方法来描述。</p><p>(4)类的结构。<br>      在客观世界中有若干类，这些类之间有一定的结构关系。通常有两种主要的结构关系，即一般–具体结构关系，整体–部分结构关系。</p><p>①一般——具体结构称为分类结构，也可以说是“或”关系，或者是“is a”关系。<br>②整体——部分结构称为组装结构，它们之间的关系是一种“与”关系，或者是“has a”关系。</p><p>(5)消息和方法。<br>      对象之间进行通信的结构叫做消息。在对象的操作中，当一个消息发送给某个对象时，消息包含接收对象去执行某种操作的信息。发送一条消息至少要包括说明接受消息的对象名、发送给该对象的消息名（即对象名、方法名）。一般还要对参数加以说明，参数可以是认识该消息的对象所知道的变量名，或者是所有对象都知道的全局变量名。</p><p>类中操作的实现过程叫做方法，一个方法有方法名、参数、方法体。消息传递如图10-1所示。</p><p>二、面向对象的特征</p><p>(1)对象唯一性。<br>      每个对象都有自身唯一的标识，通过这种标识，可找到相应的对象。在对象的整个生命期中，它的标识都不改变，不同的对象不能有相同的标识。</p><p>(2)分类性。<br>      分类性是指将具有一致的数据结构(属性)和行为(操作)的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</p><p>(3)继承性。<br>      继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><p>继承性是面向对象程序设计语言不同于其它语言的最重要的特点，是其他语言所没有的。</p><p>在类层次中，子类只继承一个父类的数据结构和方法，则称为单重继承。<br>在类层次中，子类继承了多个父类的数据结构和方法，则称为多重继承。<br>在软件开发中，类的继承性使所建立的软件具有开放性、可扩充性，这是信息组织与分类的行之有效的方法，它简化了对象、类的创建工作量，增加了代码的可重性。<br>采用继承性，提供了类的规范的等级结构。通过类的继承关系，使公共的特性能够共享，提高了软件的重用性。</p><p>(4)多态性(多形性)<br>      多态性使指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。<br>      多态性允许每个对象以适合自身的方式去响应共同的消息。<br>      多态性增强了软件的灵活性和重用性。</p><p>三、面向对象的要素</p><p>(1)抽象。<br>      抽象是指强调实体的本质、内在的属性。在系统开发中，抽象指的是在决定如何实现对象之前的对象的意义和行为。使用抽象可以尽可能避免过早考虑一些细节。</p><p>类实现了对象的数据（即状态）和行为的抽象。</p><p>(2)封装性（信息隐藏）。<br>      封装性是保证软件部件具有优良的模块性的基础。<br>      面向对象的类是封装良好的模块，类定义将其说明（用户可见的外部接口）与实现（用户不可见的内部实现）显式地分开，其内部实现按其具体定义的作用域提供保护。<br>      对象是封装的最基本单位。封装防止了程序相互依赖性而带来的变动影响。面向对象的封装比传统语言的封装更为清晰、更为有力。</p><p>(3)共享性<br>      面向对象技术在不同级别上促进了共享<br>      同一类中的共享。同一类中的对象有着相同数据结构。这些对象之间是结构、行为特征的共享关系。<br>      在同一应用中共享。在同一应用的类层次结构中，存在继承关系的各相似子类中，存在数据结构和行为的继承，使各相似子类共享共同的结构和行为。使用继承来实现代码的共享，这也是面向对象的主要优点之一。<br>      在不同应用中共享。面向对象不仅允许在同一应用中共享信息，而且为未来目标的可重用设计准备了条件。通过类库这种机制和结构来实现不同应用中的信息共享。</p><p>4.强调对象结构而不是程序结构</p><p>四、面向对象的开发方法</p><p>目前，面向对象开发方法的研究已日趋成熟，国际上已有不少面向对象产品出现。面向对象开发方法有Coad方法、Booch方法和OMT方法等。</p><p>1.Booch方法</p><p>Booch最先描述了面向对象的软件开发方法的基础问题，指出面向对象开发是一种根本不同于传统的功能分解的设计方法。面向对象的软件分解更接近人对客观事务的理解，而功能分解只通过问题空间的转换来获得。</p><p>2.Coad方法</p><p>Coad方法是1989年Coad和Yourdon提出的面向对象开发方法。该方法的主要优点是通过多年来大系统开发的经验与面向对象概念的有机结合，在对象、结构、属性和操作的认定方面，提出了一套系统的原则。该方法完成了从需求角度进一步进行类和类层次结构的认定。尽管Coad方法没有引入类和类层次结构的术语，但事实上已经在分类结构、属性、操作、消息关联等概念中体现了类和类层次结构的特征。</p><p>3.OMT方法</p><p>OMT方法是1991年由James Rumbaugh等5人提出来的，其经典著作为“面向对象的建模与设计”。</p><p>该方法是一种新兴的面向对象的开发方法，开发工作的基础是对真实世界的对象建模，然后围绕这些对象使用分析模型来进行独立于语言的设计，面向对象的建模和设计促进了对需求的理解，有利于开发得更清晰、更容易维护的软件系统。该方法为大多数应用领域的软件开发提供了一种实际的、高效的保证，努力寻求一种问题求解的实际方法。</p><p> 4.UML(Unified Modeling Language)语言</p><p>软件工程领域在1995年～1997年取得了前所未有的进展，其成果超过软件工程领域过去15年的成就总和，其中最重要的成果之一就是统一建模语言（UML)的出现。UML将是面向对象技术领域内占主导地位的标准建模语言。<br>UML不仅统一了Booch方法、OMT方法、OOSE方法的表示方法，而且对其作了进一步的发展，最终统一为大众接受的标准建模语言。UML是一种定义良好、易于表达、功能强大且普遍适用的建模语言。它融入了软件工程领域的新思想、新方法和新技术。它的作用域不限于支持面向对象的分析与设计，还支持从需求分析开始的软件开发全过程。</p><p>五、面向对象的模型</p><p>·对象模型</p><p>对象模型表示了静态的、结构化的系统数据性质，描述了系统的静态结构，它是从客观世界实体的对象关系角度来描述，表现了对象的相互关系。该模型主要关心系统中对象的结构、属性和操作，它是分析阶段三个模型的核心，是其他两个模型的框架。</p><p>1.对象和类</p><p>(1) 对象。<br>      对象建模的目的就是描述对象。</p><p>(2) 类。<br>      通过将对象抽象成类，我们可以使问题抽象化，抽象增强了模型的归纳能力。</p><p>(3) 属性。<br>      属性指的是类中对象所具有的性质（数据值）。</p><p>(4) 操作和方法。</p><p>操作是类中对象所使用的一种功能或变换。类中的各对象可以共享操作，每个操作都有一个目标对象作为其隐含参数。<br>  方法是类的操作的实现步骤。</p><p>2.关联和链<br>      关联是建立类之间关系的一种手段，而链则是建立对象之间关系的一种手段。</p><p>(1) 关联和链的含义。<br>      链表示对象间的物理与概念联结，关联表示类之间的一种关系，链是关联的实例，关联是链的抽象。</p><p>(2) 角色。<br>      角色说明类在关联中的作用，它位于关联的端点。</p><p> (3) 受限关联。<br>      受限关联由两个类及一个限定词组成，限定词是一种特定的属性，用来有效的减少关联的重数，限定词在关联的终端对象集中说明。<br>      限定提高了语义的精确性，增强了查询能力，在现实世界中，常常出现限定词。</p><p>(4) 关联的多重性。<br>      关联的多重性是指类中有多少个对象与关联的类的一个对象相关。重数常描述为“一”或“多”。<br>      图10-8表示了各种关联的重数。小实心圆表示“多个”，从零到多。小空心圆表示零或一。没有符号表示的是一对一关联。</p><p>3.类的层次结构<br>      (1) 聚集关系。<br>      聚集是一种“整体－部分”关系。在这种关系中，有整体类和部分类之分。聚集最重要的性质是传递性，也具有逆对称性。</p><p>聚集可以有不同层次，可以把不同分类聚集起来得到一颗简单的聚集树，聚集树是一种简单表示，比画很多线来将部分类联系起来简单得多，对象模型应该容易地反映各级层次，图10-10表示一个关于微机的多极聚集。</p><p>(2)一般化关系。<br>      一般化关系是在保留对象差异的同时共享对象相似性的一种高度抽象方式。它是“一般—具体”的关系。一般化类称为你类，具体类又能称为子类，各子类继承了交类的性质，而各子类的一些共同性质和操作又归纳到你类中。因此，一般化关系和继承是同时存在的。一般化关系的符号表示是在类关联的连线上加一个小三角形，如图10-11</p><p>4.对象模型<br>      (1)模板。模板是类、关联、一般化结构的逻辑组成。<br>      (2)对象模型。</p><p>对象模型是由一个或若干个模板组成。模板将模型分为若干个便于管理的子块，在整个对象模型和类及关联的构造块之间，模板提供了一种集成的中间单元，模板中的类名及关联名是唯一的。</p><p>·动态模型</p><p>动态模型是与时间和变化有关的系统性质。该模型描述了系统的控制结构，它表示了瞬间的、行为化的系统控制<br>性质，它关心的是系统的控制，操作的执行顺序，它表示从对象的事件和状态的角度出发，表现了对象的相互行为。<br>该模型描述的系统属性是触发事件、事件序列、状态、事件与状态的组织。使用状态图作为描述工具。它涉及到事件、状态、操作等重要概念。<br>1.事件<br>事件是指定时刻发生的某件事。</p><p>2.状态<br>状态是对象属性值的抽象。对象的属性值按照影响对象显著行为的性质将其归并到一个状态中去。状态指明了对象<br>对输入事件的响应。</p><p>3.状态图<br>状态图是一个标准的计算机概念，他是有限自动机的图形表示，这里把状态图作为建立动态模型的图形工具。<br>      状态图反映了状态与事件的关系。当接收一事件时，下一状态就取决于当前状态和所接收的该事件，由该事件引起的状态变化称为转换。<br>      状态图是一种图，用结点表示状态，结点用圆圈表示；圆圈内有状态名，用箭头连线表示状态的转换，上面标记事件名，箭头方向表示转换的方向。</p><p>·功能模型</p><p>功能模型描述了系统的所有计算。功能模型指出发生了什么，动态模型确定什么时候发生，而对象模型确定发生的客体。功能模型表明一个计算如何从输入值得到输出值，它不考虑计算的次序。功能模型由多张数据流图组成。数据流图用来表示从源对象到目标对象的数据值的流向，它不包含控制信息，控制信息在动态模型中表示，同时数据流图也不表示对象中值的组织，值的组织在对象模型中表示。图10-15给出了一个窗口系统的图标显示的数据流图。</p><p>数据流图中包含有处理、数据流、动作对象和数据存储对象。</p><p>1.处理<br>      数据流图中的处理用来改变数据值。最低层处理是纯粹的函数，一张完整的数据流图是一个高层处理。</p><p>2.数据流<br>      数据流图中的数据流将对象的输出与处理、处理与对象的输入、处理与处理联系起来。在一个计算机中，用数据流来表示一中间数据值，数据流不能改变数据值。</p><p>3.动作对象<br>      动作对象是一种主动对象，它通过生成或者使用数据值来驱动数据流图。</p><p>4.数据存储对象<br>      数据流图中的数据存储是被动对象，它用来存储数据。它与动作对象不一样，数据存储本身不产生任何操作，它只响应存储和访问的要求。</p><p>六、面向对象的分析</p><p>面向对象分析的目的是对客观世界的系统进行建模。本节以上面介绍的模型概念为基础，结合“银行网络系统”的具体实例来构造客观世界问题的准确、严密的分析模型。<br>分析模型有三种用途：用来明确问题需求；为用户和开发人员提供明确需求；为用户和开发人员提供一个协商的基础，作为后继的设计和实现的框架。</p><p>（一） 面向对象的分析</p><p>系统分析的第一步是：陈述需求。分析者必须同用户一块工作来提炼需求，因为这样才表示了用户的真实意图，其中涉及对需求的分析及查找丢失的信息。下面以“银行网络系统”为例，用面向对象方法进行开发。<br>银行网络系统问题陈述：设计支持银行网络的软件，银行网络包括人工出纳站和分行共享的自动出纳机。每个分理处用分理处计算机来保存各自的帐户，处理各自的事务；各自分理处的出纳站与分理处计算机通信，出纳站录入帐户和事务数据；自动出纳机与分行计算机通信，分行计算机与拨款分理处结帐，自动出纳机与用户接口接受现金卡，与分行计算机通信完成事务，发放现金，打印收据；系统需要记录保管和安全措施；系统必须正确处理同一帐户的并发访问；每个分处理为自己的计算机准备软件，银行网络费用根据顾客和现金卡的数目分摊给各分理处。<br>图10－18给出银行网络系统的示意图。</p><p>（二）建立对象模型<br>      首先标识和关联，因为它们影响了整体结构和解决问题的方法，其次是增加属性，进一步描述类和关联的基本网络，使用继承合并和组织类，最后操作增加到类中去作为构造动态模型和功能模型的副产品。</p><p>1.确定类<br>构造对象模型的第一步是标出来自问题域的相关的对象类，对象包括物理实体和概念。所有类在应用中都必须有意义，在问题陈述中，并非所有类都是明显给出的。有些是隐含在问题域或一般知识中的。</p><p>按图10-19所示的过程确定类</p><p>查找问题陈述中的所有名词，产生如下的暂定类。<br>软件            银行网络        出纳员        自动出纳机          分行<br>分处理          分处理计算机    帐户          事务                出纳站<br>事务数据        分行计算机      现金卡        用户                现金<br>收据            系统            顾客          费用                帐户数据<br>访问            安全措施        记录保管</p><p>根据下列标准，去掉不必要的类和不正确的类。<br>（1） 冗余类：若两个类表述了同一个信息 ，保留最富有描述能力的类。如”用户”和”顾客”就是重复的描述，因为”顾客”最富有描述性，因此保留它。<br>（2） 不相干的类：除掉与问题没有关系或根本无关的类。例如，摊派费用超出了银行网络的范围。<br>（3） 模糊类：类必须是确定的，有些暂定类边界定义模糊或范围太广，如”记录保管”就模糊类，它是”事务”中的一部分。<br>（4） 属性：某些名词描述的是其他对象的属性，则从暂定类中删除。如果某一性质的独立性很重要，就应该把他归属到类，而不把它作为属性。<br>（5） 操作：如果问题陈述中的名词有动作含义，则描述的操作就不是类。但是具有自身性质而且需要独立存在的操作应该描述成类。如我们只构造电话模型，”拨号”就是动态模型的一部分而不是类，但在电话拨号系统中，”拨号”是一个重要的类，它日期、时间、受话地点等属性。</p><p>在银行网络系统中，模糊类是”系统”、”安全措施”、”记录保管”、”银行网络”等。属于属性的有：”帐户数据”、”收据”、”现金”、”事务数据”。属于实现的如：”访问”、”软件”等。这些均应除去。</p><p>  2.准备数据字典</p><p>  为所有建模实体准备一个数据字典。准确描述各个类的精确含义，描述当前问题中的类的范围，包括对类的成员、用法方面的假设或限制。</p><p>  3.确定关联</p><p>  两个或多个类之间的相互依赖就是关联。一种依赖表示一种关联，可用各种方式来实现关联，但在分析模型中应删除实现的考虑，以便设计时更为灵活。关联常用描述性动词或动词词组来表示，其中有物理位置的表示、传导的动作、通信、所有者关系、条件的满足等。从问题陈述中抽取所有可能的关联表述，把它们记下来，但不要过早去细化这些表述。</p><p>  下面是银行网络系统中所有可能的关联，大多数是直接抽取问题中的动词词组而得到的。在陈述中，有些动词词组表述的关联是不明显的。最后，还有一些关联与客观世界或人的假设有关，必须同用户一起核实这种关联，因为这种关联在问题陈述中找不到。</p><p>  银行网络问题陈述中的关联：<br>·银行网络包括出纳站和自动出纳机；<br>·分行共享自动出纳机；<br>·分理处提供分理处计算机；<br>·分理处计算机保存帐户；<br>·分理处计算机处理帐户支付事务；<br>·分理处拥有出纳站；<br>·出纳站与分理处计算机通信；<br>·出纳员为帐户录入事务；<br>·自动出纳机接受现金卡；<br>·自动出纳机与用户接口；<br>·自动出纳机发放现金；<br>·自动出纳机打印收据；<br>·系统处理并发访问；<br>·分理处提供软件；<br>·费用分摊给分理处。<br>  隐含的动词词组：<br>·分行由分理处组成；<br>·分理处拥有帐户；<br>·分行拥有分行计算机；<br>·系统提供记录保管；<br>·系统提供安全；<br>·顾客有现金卡。<br>  基于问题域知识的关联：<br>·分理处雇佣出纳员；<br>·现金卡访问帐户。   </p><p>  使用下列标准去掉不必要和不正确的关联：</p><p>（1） 若某个类已被删除，那么与它有关的关联也必须删除或者用其它类来重新表述。在例中，我们删除了”银行网络”，相关的关联也要删除。<br>（2） 不相干的关联或实现阶段的关联：删除所有问题域之外的关联或涉及实现结构中的关联。如”系统处理并发访问”就是一种实现的概念。<br>（3） 动作：关联应该描述应用域的结构性质而不是瞬时事件，因此应删除”自动出纳机接受现金卡”，”自动出纳机与用户接口”等。<br>（4） 派生关联：省略那些可以用其他关联来定义的关联。因为这种关联是冗余的。银行网络系统的初步对象图如图10-20所示。其中含有关联。</p><p>4.确定属性</p><p>  属性是个体对象的性质,属性通常用修饰性的名词词组来表示.形容词常常表示具体的可枚举的属性值,属性不可能在问题陈述中完全表述出来,必须借助于应用域的知识及对客观世界的知识才可以找到它们。只考虑与具体应用直接相关的属性，不要考虑那些超出问题范围的属性。首先找出重要属性，避免那些只用于实现的属性，要为各个属性取有意义的名字。按下列标准删除不必要的和不正确的属性：</p><p>（1） 对象：若实体的独立存在比它的值重要，那么这个实体不是属性而是对象。如在邮政目录中，”城市”是一个属性，然而在人口普查中，”城市”则被看作是对象。在具体应用中，具有自身性质的实体一定是对象。<br>（2） 定词：若属性值取决于某种具体上下文，则可考虑把该属性重新表述为一个限定词。<br>（3） 名称：名称常常作为限定词而不是对象的属性，当名称不依赖于上下文关系时，名称即为一个对象属性，尤其是它不惟一时。<br>（4） 标识符：在考虑对象模糊性时，引入对象标识符表示，在对象模型中不列出这些对象标识符，它是隐含在对象模型中，只列出存在于应用域的属性。<br>（5） 内部值：若属性描述了对外不透明的对象的内部状态，则应从对象模型中删除该属性。<br>（6） 细化：忽略那些不可能对大多数操作有影响的属性。</p><p>  5.使用继承来细化类</p><p>  使用继承来共享公共机构，以次来组织类，可以用两种方式来进行。<br>  （1）自底向上通过把现有类的共同性质一般化为父类，寻找具有相似的属性，关系或操作的类来发现继承。例如”远程事务”和”出纳事务”是类似的，可以一般化为” 事务”。有些一般化结构常常是基于客观世界边界的现有分类，只要可能，尽量使用现有概念。对称性常有助于发现某些丢失的类。<br>（2）自顶向下将现有的类细化为更具体的子类。具体化常常可以从应用域中明显看出来。应用域中各枚举字情况是最常见的具体化的来源。例如：菜单，可以有固定菜单，顶部菜单，弹出菜单，下拉菜单等，这就可以把菜单类具体细化为各种具体菜单的子类。当同一关联名出现多次且意义也相同时，应尽量具体化为相关联的类，例如”事务”从”出纳站”和”自动出纳机”进入，则”录入站”就是”出纳站”和”自动出纳站”的一般化。在类层次中，可以为具体的类分配属性和关联。各属性和都应分配给最一般的适合的类，有时也加上一些修正。</p><p>应用域中各枚举情况是最常见的具体化的来源。</p><p>  6.完善对象模型</p><p>  对象建模不可能一次就能保证模型是完全正确的，软件开发的整个过程就是一个不断完善的过程。模型的不同组成部分多半是在不同的阶段完成的，如果发现模型的缺陷，就必须返回到前期阶段去修改，有些细化工作是在动态模型和功能模型完成之后才开始进行的。<br>  （1） 几种可能丢失对象的情况及解决办法：<br>·同一类中存在毫无关系的属性和操作，则分解这个类，使各部分相互关联；<br>·一般化体系不清楚，则可能分离扮演两种角色的类<br>·存在无目标类的操作，则找出并加上失去目标的类；<br>·存在名称及目的相同的冗余关联，则通过一般化创建丢失的父类，把关联组织在一起。</p><p>  （2） 查找多余的类。<br>  类中缺少属性，操作和关联，则可删除这个类。</p><p>  （3）查找丢失的关联。<br>  丢失了操作的访问路径，则加入新的关联以回答查询。</p><p>  （4） 网络系统的具体情况作如下的修改：<br>①现金卡有多个独立的特性。把它分解为两个对象：卡片权限和现金卡。<br>a.卡片权限：它是银行用来鉴别用户访问权限的卡片，表示一个或多个用户帐户的访问权限；各个卡片权限对象中可能具有好几个现金卡，每张都带有安全码，卡片码，它们附在现金卡上，表现银行的卡片权限。<br>b.现金卡：它是自动出纳机得到表示码的数据卡片，它也是银行代码和现金卡代码的数据载体。<br>②”事务”不能体现对帐户之间的传输描述的一般性，因它只涉及一个帐户，一般来说，在每个帐户中，一个”事务”包括一个或多个”更新”，一个”更新”是对帐户的一个动作，它们是取款，存款，查询之一。一个”更新”中所有”更新”应该是一个原子操作。<br>③”分理处”和”分离处理机”之间，”分行”和”分行处理机”之间的区别似乎并不影响分析，计算机的通信处理实际上是实现的概念，将”分理处计算机”并入到”分理处”，将”分行计算机”并入到”分行”。</p><p>（三）建立动态模型</p><p>  1.准备脚本<br>  动态分析从寻找事件开始，然后确定各对象的可能事件顺序。在分析阶段不考虑算法的执行，算法是实现模型的一部分。</p><p>  2.确定事件<br>  确定所有外部事件。事件包括所有来自或发往用户的信息、外部设备的信号、输入、转换和动作，可以发现正常事件，但不能遗漏条件和异常事件。</p><p>  3.准备事件跟踪表<br>  把脚本表示成一个事件跟踪表，即不同对象之间的事件排序表，对象为表中的列，给每个对象分配一个独立的列。</p><p>  4.构造状态图<br>  对各对象类建立状态图，反映对象接收和发送的事件，每个事件跟踪都对应于状态图中一条路径。</p><p>（四）建立功能建模</p><p>  功能模型用来说明值是如何计算的，表明值之间的依赖关系及相关的功能，数据流图有助于表示功能依赖关系，其中的处理应于状态图的活动和动作，其中的数据流对应于对象图中的对象或属性。</p><p>  1.确定输入值、输出值<br>  先列出输入、输出值，输入、输出值是系统与外界之间的事件的参数。</p><p>  2.建立数据流图<br>  数据流图说明输出值是怎样从输入值得来的，数据流图通常按层次组织。</p><p>（五）确定操作</p><p>  在建立对象模型时，确定了类、关联、结构和属性，还没有确定操作。只有建立了动态模型和功能模型之后，才可能最后确定类的操作。</p><p>七、面向对象的设计</p><p>  面向对象设计是把分析阶段得到的需求转变成符合成本和质量要求的、抽象的系统实现方案的过程。从面向对象分析到面向对象设计，是一个逐渐扩充模型的过程。</p><p>  瀑布模型把设计进一步划分成概要设计和详细设计两个阶段，类似地，也可以把面向对象设计再细分为系统设计和对象设计。系统设计确定实现系统的策略和目标系统的高层结构。对象设计确定解空间中的类、关联、接口形式及实现操作的算法。</p><p>（一）面向对象设计的准则</p><p>  1.模块化<br>  面向对象开发方法很自然地支持了把系统分解成模块的设计原则：对象就是模块。它是把数据结构和操作这些数据的方法紧密地结合在一起所构成的模块。<br>  2.抽象<br>  面向对象方法不仅支持过程抽象，而且支持数据抽象。<br>  3.信息隐藏<br>  在面向对象方法中，信息隐藏通过对象的封装性来实现。<br>  4.低耦合<br>  在面向对象方法中，对象是最基本的模块，因此，耦合主要指不同对象之间相互关联的紧密程度。低耦合是设计的一个重要标准，因为这有助于使得系统中某一部分的变化对其它部分的影响降到最低程度。<br>  5.高内聚<br>  (1)操作内聚。<br>  (2)类内聚。<br>  (3)一般——具体内聚。</p><p>（二）面向对象设计的启发规则</p><p>  1.设计结果应该清晰易懂<br>  使设计结果清晰、易懂、易读是提高软件可维护性和可重用性的重要措施。显然，人们不会重用那些他们不理解的设计。<br>  要做到：<br>  (1)用词一致。<br>  (2)使用已有的协议。<br>  (3)减少消息模式的数量。<br>  (4)避免模糊的定义。</p><p>  2.一般——具体结构的深度应适当</p><p>  3.设计简单类<br>  应该尽量设计小而简单的类，这样便以开发和管理。为了保持简单，应注意以下几点：<br>  (1)避免包含过多的属性。<br>  (2)有明确的定义。<br>  (3)尽量简化对象之间的合作关系。<br>  (4)不要提供太多的操作。</p><p>  4.使用简单的协议<br>  一般来说，消息中参数不要超过3个。</p><p>  5.使用简单的操作<br>  面向对象设计出来的类中的操作通常都很小，一般只有3至5行源程序语句，可以用仅含一个动词和一个宾语的简单句子描述它的功能</p><p>  6.把设计变动减至最小<br>  通常，设计的质量越高，设计结果保持不变的时间也越长。即使出现必须修改设计的情况，也应该使修改的范围尽可能小。<br>（三）系统设计</p><p>  系统设计是问题求解及建立解答的高级策略。必须制定解决问题的基本方法，系统的高层结构形式包括子系统的分解、它的固有并发性、子系统分配给硬软件、数据存储管理、资源协调、软件控制实现、人机交互接口。</p><p>1.系统设计概述</p><p>设计阶段先从高层入手，然后细化。系统设计要决定整个结构及风格，这种结构为后面设计阶段的更详细策略的设计提供了基础。</p><p>  (1)系统分解。<br>  系统中主要的组成部分称为子系统，子系统既不是一个对象也不是一个功能，而是类、关联、操作、事件和约束的集合。<br>  (2)确定并发性。<br>  分析模型、现实世界及硬件中不少对象均是并发的。<br>  (3)处理器及任务分配。<br>  各并发子系统必须分配给单个硬件单元，要么是一个一般的处理器，要么是一个具体的功能单元。<br>  (4)数据存储管理。<br>  系统中的内部数据和外部数据的存储管理是一项重要的任务。通常各数据存储可以将数据结构、文件、数据库组合在一起，不同数据存储要在费用、访问时间、容量及可靠性之间做出折衷考虑。<br>  (5)全局资源的处理。<br>  必须确定全局资源，并且制定访问全局资源的策略。<br>  (6)选择软件控制机制。<br>  分析模型中所有交互行为都表示为对象之间的事件。系统设计必须从多种方法中选择某种方法来实现软件的控制。<br>  (7)人机交互接口设计。<br>  设计中的大部分工作都与稳定的状态行为有关，但必须考虑用户使用系统的交互接口。</p><p>  2.系统结构的一般框架</p><p>  3.系统分解——建立系统的体系结构<br>  可用的软件库以及程序员的编程经验。<br>  通过面向对象分析得到的问题域精确模型，为设计体系结构奠定了良好的基础，建立了完整的框架。</p><p>  4.选择软件控制机制<br>  软件系统中存在两种控制流，外部控制流和内部控制流。</p><p>  5.数据存储管理<br>  数据存储管理是系统存储或检索对象的基本设施，它建立在某种数据存储管理系统之上，并且隔离了数据存储管理模式的影响。</p><p>  6.设计人机交互接口<br>  在面向对象分析过程中，已经对用户界面需求作了初步分析，在面向对象设计过程中，则应该对系统的人机交互接口进行详细设计，以确定人机交互的细节，其中包括指定窗口和报表的形式、设计命令层次等项内容。</p><p>（四）对象设计<br>  1.对象设计概述<br>  2.三种模型的结合<br>  (1)获得操作。<br>  (2)确定操作的目标对象。<br>  3.算法设计<br>  4.优化设计<br>  5.控制的实现<br>  6.调整继承<br>  7.关联的设计</p><p>八、面向对象的实现</p><p>（一）程序设计语言</p><p>  1.选择面向对象语言<br>  采用面向对象方法开发软件的基本目的和主要优点是通过重用提高软件的生产率。因此，应该优先选用能够最完善、最准确地表达问题域语义的面向对象语言。</p><p>  在选择编程语言时，应该考虑的其他因素还有：对用户学习面向对象分析、设计和编码技术所能提供的培训操作；在使用这个面向对象语言期间能提供的技术支持；能提供给开发人员使用的开发工具、开发平台，对机器性能和内存的需求，集成已有软件的容易程度。</p><p>  2.程序设计风格<br>  (1)提高重用性。<br>  (2)提高可扩充性。<br>  (3)提高健壮性。</p><p>（二）类的实现</p><p>  在开发过程中，类的实现是核心问题。在用面向对象风格所写的系统中，所有的数据都被封装在类的实例中。而整个程序则被封装在一个更高级的类中。在使用既存部件的面向对象系统中，可以只花费少量时间和工作量来实现软件。只要增加类的实例，开发少量的新类和实现各个对象之间互相通信的操作，就能建立需要的软件。</p><p>  一种方案是先开发一个比较小、比较简单的来，作为开发比较大、比较复杂的类的基础。</p><p>  (1)“原封不动”重用。<br>  (2)进化性重用。<br>  一个能够完全符合要求特性的类可能并不存在。<br>  (3)“废弃性”开发。<br>  不用任何重用来开发一个新类。<br>  (4)错误处理。<br>  一个类应是自主的，有责任定位和报告错误。</p><p>（三）应用系统的实现</p><p>  应用系统的实现是在所有的类都被实现之后的事。实现一个系统是一个比用过程性方法更简单、更简短的过程。有些实例将在其他类的初始化过程中使用。而其余的则必须用某种主过程显式地加以说明，或者当作系统最高层的类的表示的一部分。</p><p>  在C++和C中有一个main( )函数，可以使用这个过程来说明构成系统主要对象的那些类的实例。</p><p>（四）面向对象测试</p><p>  (1)算法层。<br>  (2)类层。<br>  测试封装在同一个类中的所有方法和属性之间的相互作用。<br>  (3)模板层。<br>  测试一组协同工作的类之间的相互作用。<br>  (4)系统层。<br>  把各个子系统组装成完整的面向对象软件系统，在组装过程中同时进行测试。</p><p>九、面向对象和基于对象的区别</p><p>很多人没有区分“面向对象”和“基于对象”两个不同的概念。面向对象的三大特点（封装，继承，多态）却一不可。通常“基于对象”是使用对象，但是无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是说“基于对象”没有继承的特点。而“多态”表示为父类类型的子类对象实例，没有了继承的概念也就无从谈论“多态”。现在的很多流行技术都是基于对象的，它们使用一些封装好的对象，调用对象的方法，设置对象的属性。但是它们无法让程序员派生新对象类型。他们只能使用现有对象的方法和属性。所以当你判断一个新的技术是否是面向对象的时候，通常可以使用后两个特性来加以判断。“面向对象”和“基于对象” 都实现了“封装”的概念，但是面向对象实现了“继承和多态”，而“基于对象”没有实现这些，的确很饶口。</p><p>从事面向对象编程的人按照分工来说，可以分为“类库的创建者”和“类库的使用者”。使用类库的人并不都是具备了面向对象思想的人，通常知道如何继承和派生新对象就可以使用类库了，然而我们的思维并没有真正的转过来，使用类库只是在形式上是面向对象，而实质上只是库函数的一种扩展。</p><p>面向对象是一种思想，是我们考虑事情的方法，通常表现为我们是将问题的解决按照过程方式来解决呢，还是将问题抽象为一个对象来解决它。很多情况下，我们会不知不觉的按照过程方式来解决它，而不是考虑将要解决问题抽象为对象去解决它。有些人打着面向对象的幌子，干着过程编程的勾当。<br>文章来源于：<a href="http://lidanx.blog.163.com/blog/static/4116807220085332130817/" target="_blank" rel="noopener">http://lidanx.blog.163.com/blog/static/4116807220085332130817/</a><br><a href="http://blog.csdn.net/yzh648542313/article/details/34157593" target="_blank" rel="noopener">http://blog.csdn.net/yzh648542313/article/details/34157593</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象编程思想&quot;&gt;&lt;a href=&quot;#面向对象编程思想&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程思想&quot;&gt;&lt;/a&gt;面向对象编程思想&lt;/h2&gt;&lt;p&gt;面向对象是一种新兴的程序设计方法，或者说它是一种新的程序设计范型，其基本思想是使用对象，类，
      
    
    </summary>
    
      <category term="编程思想" scheme="feengqi.com/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="面向对象编程思想" scheme="feengqi.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>png8和png24</title>
    <link href="feengqi.com/png8%E5%92%8Cpng24.html"/>
    <id>feengqi.com/png8和png24.html</id>
    <published>2017-08-06T02:00:10.000Z</published>
    <updated>2018-03-18T04:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以下为png8和png24的一下知识点，有兴趣的同学可以看一下</strong></p><p>一、PNG-8 与 GIF</p><p>PNG-8跟GIF一样支持单色透明。GIF有的有点PNG-8都有，GIF没有的PNG-8还有，比如:同样的文件PNG-8格式的却比GIF要小。</p><p>二、PNG-8 与 PNG-24 对IE6的支持程度</p><p>PNG-24是支持alpha通道透明的格式，支持半透明，IE6不支持PNG-24,但是他完全支持PNG-8。<br>如果是不透明的PNG-24,IE6也是完美支持,之所以说IE6不支持PNG-24是因为PNG-24的半透明会在IE6里显示不正常。</p><p>三、PNG-8 与 PNG-24 的透明区别</p><p>PNG-8 和 gif 有一些相似之处，模式都是索引颜色，只支持像素级的纯透明，不支持 alpha 透明。我们通常说的“IE6 不支持 PNG 透明”，是指不支持 PNG-24 的透明（将透明区域显示为灰色）。但是 IE6 支持 PNG-8 的透明，就像支持 gif 的透明一样。</p><p>四、PNG-8 的高压缩比</p><p>切图时，有时选择 PNG-8 可以获得更高的压缩比。注意，是 PNG-8，不是 PNG-24。不过有些情况下还是 gif 或 jpg 会小一些，需要根据实际情况调试以选择最佳方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;以下为png8和png24的一下知识点，有兴趣的同学可以看一下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、PNG-8 与 GIF&lt;/p&gt;
&lt;p&gt;PNG-8跟GIF一样支持单色透明。GIF有的有点PNG-8都有，GIF没有的PNG-8还有，比如:同样的文件PNG-8
      
    
    </summary>
    
      <category term="png" scheme="feengqi.com/categories/png/"/>
    
    
      <category term="png8和png24" scheme="feengqi.com/tags/png8%E5%92%8Cpng24/"/>
    
  </entry>
  
  <entry>
    <title>git命令和金手指</title>
    <link href="feengqi.com/git%E5%91%BD%E4%BB%A4%E5%92%8C%E9%87%91%E6%89%8B%E6%8C%87.html"/>
    <id>feengqi.com/git命令和金手指.html</id>
    <published>2017-07-23T02:46:52.000Z</published>
    <updated>2018-03-18T09:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h1></blockquote><p>1.正常提交</p><ul><li>git add ./fileName</li><li>git commit -m”注释”</li><li>git pull origin &lt;branch分支名&gt;</li><li>git push origin &lt;branch分支名&gt;</li></ul><p>2.撤销工作区修改</p><ul><li>git checkout .</li><li>或者</li><li>git checkout – <file> </file></li></ul><p>3.git add 后回退</p><ul><li>git reset HEAD <file></file></li></ul><p>4.git commit 后回退</p><ul><li>git reset –hard HEAD^ 回退上个版本</li><li>git reset –hard 某次版本号 回退到某个版本</li></ul><hr><blockquote><h1 id="金手指"><a href="#金手指" class="headerlink" title="金手指"></a>金手指</h1></blockquote><h2 id="工作区-vs-暂存区"><a href="#工作区-vs-暂存区" class="headerlink" title="工作区 vs 暂存区"></a>工作区 vs 暂存区</h2><ol><li><p>比较工作区与暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt; 不加参数即默认比较工作区与暂存区</span><br></pre></td></tr></table></figure></li><li><p>比较工作区与最新本地版本库</p><pre><code>git diff HEAD &lt;filename&gt;  如果HEAD指向的是master分支，那么HEAD还可以换成master</code></pre></li></ol><h2 id="工作区-vs-Git仓库"><a href="#工作区-vs-Git仓库" class="headerlink" title="工作区 vs Git仓库"></a>工作区 vs Git仓库</h2><ol><li>比较工作区与指定commit-id的差异<pre><code>git diff commit-id  &lt;filename&gt;</code></pre></li></ol><h2 id="暂存区-vs-Git仓库"><a href="#暂存区-vs-Git仓库" class="headerlink" title="暂存区 vs Git仓库"></a>暂存区 vs Git仓库</h2><ol><li>比较暂存区与最新本地版本库（本地库中最近一次commit的内容）<pre><code>git diff --cached  &lt;filename&gt;</code></pre></li><li>比较暂存区与指定commit-id的差异<pre><code>git diff --cached [&lt;commit-id&gt;] [&lt;path&gt;...] </code></pre></li></ol><h2 id="Git仓库-vs-Git仓库"><a href="#Git仓库-vs-Git仓库" class="headerlink" title="Git仓库 vs Git仓库"></a>Git仓库 vs Git仓库</h2><ol><li>比较两个commit-id之间的差异<pre><code>git diff [&lt;commit-id&gt;] [&lt;commit-id&gt;]</code></pre></li></ol><h2 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h2><ol><li>使用git diff打补丁</li></ol><ul><li><p>git diff &gt; patch //patch的命名是随意的，不加其他参数时作用是当我们希望将我们本仓库工作区的修改拷贝一份到其他机器上使用，但是修改的文件比较多，拷贝量比较大，</p></li><li><p>此时我们可以将修改的代码做成补丁，之后在其他机器上对应目录下使用 git apply patch 将补丁打上即可</p></li><li><p>git diff –cached &gt; patch //是将我们暂存区与版本库的差异做成补丁</p></li><li><p>git diff –HEAD &gt; patch //是将工作区与版本库的差异做成补丁</p></li><li><p>git diff Testfile &gt; patch//将单个文件做成一个单独的补丁</p></li><li><p>拓展：git apply patch 应用补丁，应用补丁之前我们可以先检验一下补丁能否应用，git apply –check patch 如果没有任何输出，那么表示可以顺利接受这个补丁<br>另外可以使用git apply –reject patch将能打的补丁先打上，有冲突的会生成.rej文件，此时可以找到这些文件进行手动打补丁</p></li></ul><hr><ul><li><p>git diff #是工作区(work dict)和暂存区(stage)的比较</p></li><li><p>git diff –cached #是暂存区(stage)和分支(master)的比较</p></li><li><p>git fsck –lost-found  //找回git add过但是已经不存在文件中的内容</p></li><li><p>find .git/objects -type f | xargs ls -lt | sed 60q这个命令，你就可以找到最近被你add到本地仓库的60个文件（这个里面的60参数可以更改成任意你喜欢的数字，比如250啦，它只是代表你想找回的最近的多少次add过的文件）</p></li><li><p>git reflog用来记录你的每一次命令</p></li></ul><hr><p>参考文章：</p><ul><li><p><a href="https://www.cnblogs.com/hope-markup/p/6683522.html" target="_blank" rel="noopener">github总结(4)–关于git reset –hard这个命令的惨痛教训</a></p></li><li><p><a href="https://www.cnblogs.com/qianqiannian/p/6010219.html" target="_blank" rel="noopener">Git diff</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;git基本操作&quot;&gt;&lt;a href=&quot;#git基本操作&quot; class=&quot;headerlink&quot; title=&quot;git基本操作&quot;&gt;&lt;/a&gt;git基本操作&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;1.正常提交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git
      
    
    </summary>
    
      <category term="git" scheme="feengqi.com/categories/git/"/>
    
    
      <category term="git找回文件" scheme="feengqi.com/tags/git%E6%89%BE%E5%9B%9E%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>创建数组</title>
    <link href="feengqi.com/%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html"/>
    <id>feengqi.com/创建数组.html</id>
    <published>2017-06-18T02:45:17.000Z</published>
    <updated>2018-03-19T13:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建数组</li></ol><p>（1）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arrayObj = new Array(); //创建一个数组。</span><br><span class="line">//代码如下：</span><br><span class="line">var arr1 = new Array();</span><br><span class="line">var arr2 = new Array(1,2);//=&gt;[1,2]</span><br></pre></td></tr></table></figure></p><p>（2）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arrayObj = new Array([size])　</span><br><span class="line">创建一个数组并指定长度，注意不是上限，是长度。</span><br><span class="line">代码如下：</span><br><span class="line">var a = new Array(5);//生成长度为5的空数组</span><br></pre></td></tr></table></figure></p><p>（3）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arrayObj = new Array([element0[, element1[, ...[, elementN]]]])　</span><br><span class="line">创建一个数组并赋值。</span><br><span class="line">代码如下：</span><br><span class="line">var a = new Array([&quot;b&quot;, 2, &quot;a&quot;, 4,]);//[[&quot;b&quot;, 2, &quot;a&quot;, 4]]</span><br></pre></td></tr></table></figure></p><p>（4）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arrayObj = [element0, element1, ..., elementN]　</span><br><span class="line">创建一个数组并赋值的简写，注意这里中括号不表示可省略。</span><br><span class="line">代码如下：</span><br><span class="line">var a = [&quot;b&quot;, 2, &quot;a&quot;, 4,];</span><br><span class="line">（注）：注意带“[]”与不带“[]”的区别</span><br><span class="line"></span><br><span class="line">代码如下：</span><br><span class="line">var a = new Array(5); //指创建长度为5的数组</span><br><span class="line">var a = new Array([5]); //指创建一个数组，长度为1，并且第一位是5</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;创建数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（1）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="feengqi.com/categories/js/"/>
    
    
      <category term="创建数组" scheme="feengqi.com/tags/%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>左右定宽，中间自适应，实现三列布局</title>
    <link href="feengqi.com/%E5%B7%A6%E5%8F%B3%E5%AE%9A%E5%AE%BD%EF%BC%8C%E4%B8%AD%E9%97%B4%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80.html"/>
    <id>feengqi.com/左右定宽，中间自适应，实现三列布局.html</id>
    <published>2017-05-17T04:34:12.000Z</published>
    <updated>2018-03-18T04:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>左右定宽，中间自适应，实现三列布局，有以下几种：</p><p>第一种：float<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--html--&gt;</span><br><span class="line">&lt;div id=&quot;left&quot;&gt;&lt;span&gt;left&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;right&quot;&gt;&lt;span&gt;right&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;middle&quot;&gt;&lt;span&gt;middle&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line">#left&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    background-color: red;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">#right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">#middle &#123;</span><br><span class="line">    margin: 0 200px 0 150px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #fff9ca;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>第二种：BFC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--html--&gt;</span><br><span class="line">&lt;div id=&quot;left&quot;&gt;&lt;span&gt;left&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;right&quot;&gt;&lt;span&gt;right&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;middle&quot;&gt;&lt;span&gt;middle&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line">#left &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#right &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    float: right;</span><br><span class="line">&#125;</span><br><span class="line">#middle &#123;</span><br><span class="line">    background-color: #fff9ca;</span><br><span class="line">    height: 50px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种：双飞翼布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--html--&gt;</span><br><span class="line">&lt;div class=&quot;grid&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;middle&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;middle-span&quot;&gt;&lt;span&gt;middle&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;left&quot;&gt;&lt;span&gt;left&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;right&quot;&gt;&lt;span&gt;right&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line">#middle &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    background-color: #fff9ca;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#middle-span &#123;</span><br><span class="line">    margin: 0 200px 0 150px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: red;</span><br><span class="line">    width: 150px;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    height: 50px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#right &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    margin-left: -200px;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四种：flex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--html--&gt;</span><br><span class="line">&lt;div class=&quot;flex&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;left&quot;&gt;&lt;span&gt;left&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;middle&quot;&gt;&lt;span&gt;middle&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;right&quot;&gt;&lt;span&gt;right&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line">.flex &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-flow: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#left &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#middle &#123;</span><br><span class="line">    background-color: #fff9ca;</span><br><span class="line">    flex: 1; /* flex中宽度自适应使用该属性，使用100%时其他列的固定宽度会出现问题*/</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#right &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;左右定宽，中间自适应，实现三列布局，有以下几种：&lt;/p&gt;
&lt;p&gt;第一种：float&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--html--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;span&amp;gt;left&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;span&amp;gt;right&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;middle&amp;quot;&amp;gt;&amp;lt;span&amp;gt;middle&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#left&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-color: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float: right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-color: yellow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#middle &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0 200px 0 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-color: #fff9ca;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="feengqi.com/categories/css/"/>
    
    
      <category term="css" scheme="feengqi.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>‘且’与‘或’</title>
    <link href="feengqi.com/%E2%80%98%E4%B8%94%E2%80%99%E4%B8%8E%E2%80%98%E6%88%96%E2%80%99.html"/>
    <id>feengqi.com/‘且’与‘或’.html</id>
    <published>2017-04-02T02:51:32.000Z</published>
    <updated>2018-03-18T09:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>a &amp;&amp; b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；</li><li>a || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回false，则执行b并返回b的值；</li><li>&amp;&amp; 优先级高于 ||;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;a &amp;amp;&amp;amp; b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；&lt;/li&gt;
&lt;li&gt;a || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回fals
      
    
    </summary>
    
      <category term="js运算符" scheme="feengqi.com/categories/js%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
    
      <category term="&amp;&amp;与||" scheme="feengqi.com/tags/%E4%B8%8E/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="feengqi.com/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>feengqi.com/vim常用命令.html</id>
    <published>2017-03-10T02:53:35.000Z</published>
    <updated>2018-03-18T04:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="屏幕翻滚"><a href="#屏幕翻滚" class="headerlink" title="屏幕翻滚"></a>屏幕翻滚</h4><ul><li><p>Ctrl+u # 向文件首翻半屏 </p></li><li><p>Ctrl+d # 向文件尾翻半屏 </p></li><li><p>Ctrl+f # 向文件尾翻一屏 </p></li><li><p>Ctrl＋b # 向文件首翻一屏 </p></li></ul><h4 id="复制粘贴、剪切、移动"><a href="#复制粘贴、剪切、移动" class="headerlink" title="复制粘贴、剪切、移动"></a>复制粘贴、剪切、移动</h4><ul><li><p>yy # 复制当前行 </p></li><li><p>nyy # 复制当前行开始的n行 </p></li><li><p>先按 v 然后方向键选择区域，按 y 复制选中行 </p></li><li><p>dd # 剪切当前行 </p></li><li><p>p（小） # 在当前光标处下面粘贴内容。 </p></li><li><p>P（大） # 在当前光标处上面粘贴内容 </p></li><li><p>按端口查询PID lsof -i：端口号 </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;屏幕翻滚&quot;&gt;&lt;a href=&quot;#屏幕翻滚&quot; class=&quot;headerlink&quot; title=&quot;屏幕翻滚&quot;&gt;&lt;/a&gt;屏幕翻滚&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ctrl+u # 向文件首翻半屏 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+d # 向文件尾翻半屏 &lt;
      
    
    </summary>
    
      <category term="vim" scheme="feengqi.com/categories/vim/"/>
    
    
      <category term="vim命令" scheme="feengqi.com/tags/vim%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>css选择器</title>
    <link href="feengqi.com/css%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>feengqi.com/css选择器.html</id>
    <published>2017-02-12T02:54:43.000Z</published>
    <updated>2018-03-18T09:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>(*） ：匹配任何元素<br>(element) ： 元素选择器<br>(.class) ：id选择器<br>(#id) ：id选择器</p><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><p>(空格) ：匹配所有后代<br>(,） ：css规则匹配多个对象时，用逗号分隔<br>(&gt;) ：匹配直接子元素<br>(+) ：匹配元素后面的相邻兄弟元素<br>(~) ：匹配所有元素后面的兄弟元素</p><h3 id="ccs-伪类"><a href="#ccs-伪类" class="headerlink" title="ccs 伪类"></a>ccs 伪类</h3><p>E:(first-child，first-line,first-letter) ：分别匹配元素的第一个元素、第一行、第一个字母<br>E:(before） ：前一个字母<br>E:(after) ：后一个字母<br>E:(link) ：匹配所有未被点击的元素<br>E:(vistied) ：匹配所有被点击过的元素<br>E:(hover) ：鼠标悬停样式<br>E:(active) ：已点击但未释放的元素<br>E:(focus) ：获得焦点的元素<br>E:(lang(c)) ：匹配lang=c的元素，这个比较少用，可以用于多语言的页面，去选择一些特点的元素，lang属性也不一定要写在html中间，可以写在任意的元素中</p><p>E[attr] ：根据E元素的attr属性名称匹配<br>E[attr==val] ：根据E元素的attr属性的val匹配<br>E[attr ~=val] ：根据E元素的attr属性值包含val匹配<br>E[attr != val] ：根据E元素的attr属值以val开头</p><h3 id="ccs3-增加的伪类"><a href="#ccs3-增加的伪类" class="headerlink" title="ccs3 增加的伪类"></a>ccs3 增加的伪类</h3><p>E:root ：匹配根元素 就是html元素<br>E:nth-child(n) ：前n个元素<br>E:nth-last-child(n) ：倒数第n个元素<br>E:only-child ：匹配只有一个子元素的元素<br>E:empty ：匹配没有子元素的元素<br>E:not(e) 匹配不符合的元素 :not(p) { }<br>E:target ：特定id被点击后的效果</p><p>E:enabled 匹配激活的元素<br>E:disabled 匹配禁用的的元素<br>E:checked ：匹配radio和checkbox选中的元素<br>E:selection ：匹配当前选中的元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础选择器&quot;&gt;&lt;a href=&quot;#基础选择器&quot; class=&quot;headerlink&quot; title=&quot;基础选择器&quot;&gt;&lt;/a&gt;基础选择器&lt;/h3&gt;&lt;p&gt;(*） ：匹配任何元素&lt;br&gt;(element) ： 元素选择器&lt;br&gt;(.class) ：id选择器&lt;br&gt;(#i
      
    
    </summary>
    
      <category term="css" scheme="feengqi.com/categories/css/"/>
    
    
      <category term="css选择器" scheme="feengqi.com/tags/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JS简单生成两个数字之间随机数</title>
    <link href="feengqi.com/JS%E7%AE%80%E5%8D%95%E7%94%9F%E6%88%90%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E9%97%B4%E9%9A%8F%E6%9C%BA%E6%95%B0.html"/>
    <id>feengqi.com/JS简单生成两个数字之间随机数.html</id>
    <published>2017-01-01T02:57:16.000Z</published>
    <updated>2018-03-18T04:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>JS简单生成两个数字之间随机数的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rnd</span>(<span class="params">min, max</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;JS简单生成两个数字之间随机数的方法&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="js" scheme="feengqi.com/categories/js/"/>
    
    
      <category term="js随机数" scheme="feengqi.com/tags/js%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
</feed>
